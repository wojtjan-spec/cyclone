commit 71a8fe5f771c62c507713707e0f192e6075a3871
Author:     Jan Wojtkowski <j.wojtkowski@AMDC4920.eu.corp.samsungelectronics.net>
AuthorDate: Tue May 20 10:38:55 2025 +0200
Commit:     Jan Wojtkowski <j.wojtkowski@samsung.com>
CommitDate: Tue May 27 10:31:53 2025 +0200

    Add more logs to the key-manager
    
    Change-Id: Ia181e6f7669afb2621e1620d9588461ab4eb2502

diff --git a/src/manager/crypto/tz-backend/internals.cpp b/src/manager/crypto/tz-backend/internals.cpp
index 2a892b4..4865a00 100644
--- a/src/manager/crypto/tz-backend/internals.cpp
+++ b/src/manager/crypto/tz-backend/internals.cpp
@@ -296,6 +296,11 @@ void ThrowWhenHalError(int error, const std::string& errorMessage)
 	};
 }
 
+std::string rawToHexString(const CKM::RawBuffer &raw)
+{
+	return CKM::hexDump<std::string>(raw);
+}
+
 } // namespace
 
 namespace CKM {
@@ -368,6 +373,7 @@ RawBuffer generateIV()
 	auto ctx = HalContext::Instance().GetHalContext();
 
 	security_keys_data_ptr out;
+	LogDebug("hal_security_keys_create_iv()");
 	int error = hal_security_keys_create_iv(ctx, out.Get());
 	ThrowWhenHalError(error, "Failed generating IV");
 
@@ -385,12 +391,20 @@ void generateSKey(const CryptoAlgorithm &alg,
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr halTag;
 
+	LogDebug("hal_security_keys_create_key_aes input:");
+
 	if (!pwd.empty()) {
 		if (iv.empty()) {
 			ThrowErr(Exc::InputParam, "Key generation with password encryption requires an IV");
 		}
 
 		RawBuffer pwdBuf(pwd.begin(), pwd.end());
+
+		LogDebug("keyBits: " << std::to_string(keyBits));
+ 		LogDebug("hash: " << rawToHexString(hash));
+		LogDebug("pwdBuf: " << rawToHexString(pwdBuf));
+		LogDebug("iv: " << rawToHexString(iv));
+
 		int error = hal_security_keys_create_key_aes(ctx, keyBits,
 			convertToHalData(hash), convertToHalPwdIv(pwdBuf, iv),
 			halTag.Get());
@@ -399,6 +413,11 @@ void generateSKey(const CryptoAlgorithm &alg,
 		tag.assign(halTag.GetBuffer(), halTag.GetBuffer() + halTag.GetLength());
 	} else {
 		RawBuffer pwdEmpty;
+
+		LogDebug("keyBits: " << std::to_string(keyBits));
+ 		LogDebug("hash: " << rawToHexString(hash));
+		LogDebug("iv: " << rawToHexString(iv));
+
 		int error = hal_security_keys_create_key_aes(ctx, keyBits,
 			convertToHalData(hash), convertToHalPwdIv(pwdEmpty, iv),
 			halTag.Get());
@@ -433,7 +452,20 @@ AlgoType generateAKey(const CryptoAlgorithm &alg,
 
 	switch (keyType) {
 		case AlgoType::RSA_GEN: {
+			LogDebug("hal_security_keys_create_key_pair_rsa input:");
+
 			int keyBits = unpack<int>(alg, ParamName::GEN_KEY_LEN);
+
+			LogDebug("keyBits: " << std::to_string(keyBits));
+
+			LogDebug("hashPriv: " << rawToHexString(hashPriv));
+			LogDebug("privPwdBuf: " << rawToHexString(privPwdBuf));
+			LogDebug("privPwdIv: " << rawToHexString(privPwdIv));
+
+			LogDebug("hashPub: " << rawToHexString(hashPub));
+			LogDebug("pubPwdBuf: " << rawToHexString(pubPwdBuf));
+			LogDebug("pubPwdIv: " << rawToHexString(pubPwdIv));
+
 			int error = hal_security_keys_create_key_pair_rsa(ctx, keyBits,
 				convertToHalData(hashPriv), convertToHalPwdIv(privPwdBuf, privPwdIv),
 				convertToHalData(hashPub), convertToHalPwdIv(pubPwdBuf, pubPwdIv),
@@ -446,11 +478,28 @@ AlgoType generateAKey(const CryptoAlgorithm &alg,
 			break;
 		}
 		case AlgoType::DSA_GEN: {
+			LogDebug("hal_security_keys_create_key_pair_dsa input:");
+
 			int keyBits = unpack<int>(alg, ParamName::GEN_KEY_LEN);
 			RawBuffer prime;
 			RawBuffer subprime;
 			RawBuffer base;
 			generateDSAParams(keyBits, prime, subprime, base);
+
+			LogDebug("keyBits: " << std::to_string(keyBits));
+
+			LogDebug("prime: " << rawToHexString(prime));
+			LogDebug("subprime: " << rawToHexString(subprime));
+			LogDebug("base: " << rawToHexString(base));
+
+			LogDebug("hashPriv: " << rawToHexString(hashPriv));
+			LogDebug("privPwdBuf: " << rawToHexString(privPwdBuf));
+			LogDebug("privPwdIv: " << rawToHexString(privPwdIv));
+
+			LogDebug("hashPub: " << rawToHexString(hashPub));
+			LogDebug("pubPwdBuf: " << rawToHexString(pubPwdBuf));
+			LogDebug("pubPwdIv: " << rawToHexString(pubPwdIv));
+
 			int error = hal_security_keys_create_key_pair_dsa(ctx, keyBits,
 				convertToHalData(prime), convertToHalData(subprime), convertToHalData(base),
 				convertToHalData(hashPriv), convertToHalPwdIv(privPwdBuf, privPwdIv),
@@ -464,7 +513,20 @@ AlgoType generateAKey(const CryptoAlgorithm &alg,
 			break;
 		}
 		case AlgoType::ECDSA_GEN: {
+			LogDebug("hal_security_keys_create_key_pair_dsa input:");
+
 			CKM::ElipticCurve ec = unpack<CKM::ElipticCurve>(alg, ParamName::GEN_EC);
+
+			LogDebug("ec: " << std::to_string(static_cast<int>(ec)));
+
+			LogDebug("hashPriv: " << rawToHexString(hashPriv));
+			LogDebug("privPwdBuf: " << rawToHexString(privPwdBuf));
+			LogDebug("privPwdIv: " << rawToHexString(privPwdIv));
+
+			LogDebug("hashPub: " << rawToHexString(hashPub));
+			LogDebug("pubPwdBuf: " << rawToHexString(pubPwdBuf));
+			LogDebug("pubPwdIv: " << rawToHexString(pubPwdIv));
+
 			int error = hal_security_keys_create_key_pair_ecdsa(ctx, convertToHalEcType(ec),
 				convertToHalData(hashPriv), convertToHalPwdIv(privPwdBuf, privPwdIv),
 				convertToHalData(hashPub), convertToHalPwdIv(pubPwdBuf, pubPwdIv),
@@ -477,7 +539,20 @@ AlgoType generateAKey(const CryptoAlgorithm &alg,
 			break;
 		}
 		case AlgoType::KEM_GEN: {
+			LogDebug("hal_security_keys_create_key_pair_kem input:");
+
 			CKM::KemType kt = unpack<CKM::KemType>(alg, ParamName::GEN_KEM_TYPE);
+
+			LogDebug("kt: " << std::to_string(static_cast<int>(kt)));
+
+			LogDebug("hashPriv: " << rawToHexString(hashPriv));
+			LogDebug("privPwdBuf: " << rawToHexString(privPwdBuf));
+			LogDebug("privPwdIv: " << rawToHexString(privPwdIv));
+
+			LogDebug("hashPub: " << rawToHexString(hashPub));
+			LogDebug("pubPwdBuf: " << rawToHexString(pubPwdBuf));
+			LogDebug("pubPwdIv: " << rawToHexString(pubPwdIv));
+
 			int error = hal_security_keys_create_key_pair_kem(ctx, convertToHalKemType(kt),
 				convertToHalData(hashPriv), convertToHalPwdIv(privPwdBuf, privPwdIv),
 				convertToHalData(hashPub), convertToHalPwdIv(pubPwdBuf, pubPwdIv),
@@ -501,6 +576,7 @@ AlgoType generateAKey(const CryptoAlgorithm &alg,
 void destroyKey(const RawBuffer &keyId)
 {
 	auto ctx = HalContext::Instance().GetHalContext();
+	LogDebug("hal_security_keys_destroy_key()");
 	int error = hal_security_keys_destroy_key(ctx, convertToHalData(keyId));
 	ThrowWhenHalError(error, "Failed destroying key");
 }
@@ -516,6 +592,17 @@ void importData(const Data &data,
 
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr halTag;
+
+	LogDebug("hal_security_keys_import_data() input:");
+
+	LogDebug("hash: " << rawToHexString(hash));
+	LogDebug("pwdBuf: " << rawToHexString(pwdBuf));
+	LogDebug("pwdIV: " << rawToHexString(pwdIV));
+	LogDebug("data.type: " << std::to_string(static_cast<int>(data.type)));
+	LogDebug("data.data: " << rawToHexString(data.data));
+	LogDebug("encData.iv: " << rawToHexString(encData.iv));
+	LogDebug("encData.tag: " << rawToHexString(encData.tag));
+
 	int error = hal_security_keys_import_data(ctx, convertToHalData(hash),
 		convertToHalPwdIv(pwdBuf, pwdIV), convertToHalDataType(data.type),
 		convertToHalData(data.data), convertToHalData(encData.iv),
@@ -545,6 +632,22 @@ void importWrappedKey(const RawBuffer &wrappingKeyId,
 
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr tag;
+
+	LogDebug("hal_security_keys_import_wrapped_key() input:");
+
+	LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+	LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+	LogDebug("iv: " << rawToHexString(iv));
+	LogDebug("aad: " << rawToHexString(aad));
+	LogDebug("ctrLenOrTagSizeBits: " << std::to_string(ctrLenOrTagSizeBits));
+	LogDebug("wrappingKeyId: " << rawToHexString(wrappingKeyId));
+	LogDebug("wrappingKeyPwd: " << rawToHexString(wrappingKeyPwd.getPassword()));
+	LogDebug("encryptedKey.data: " << rawToHexString(encryptedKey.data));
+	LogDebug("encryptedKeyId: " << rawToHexString(encryptedKeyId));
+	LogDebug("encryptedKeyPwdBuf: " << rawToHexString(encryptedKeyPwdBuf));
+	LogDebug("encryptedKeyIV: " << rawToHexString(encryptedKeyIV));
+	LogDebug("encryptedKey.type: " << std::to_string(static_cast<int>(encryptedKey.type)));
+
 	int error = hal_security_keys_import_wrapped_key(ctx,
 		convertToHalAlgoType(algo), convertToHalHashType(hash),
 		convertToHalData(iv), convertToHalData(aad), ctrLenOrTagSizeBits,
@@ -571,6 +674,19 @@ RawBuffer exportWrappedKey(const RawBuffer &wrappingKeyId,
 	HashAlgorithm hash;
 	decompose(alg, algo, ctrLenOrTagSizeBits, iv, aad, hash);
 
+	LogDebug("hal_security_keys_export_wrapped_key() input:");
+
+	LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+	LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+	LogDebug("iv: " << rawToHexString(iv));
+	LogDebug("aad: " << rawToHexString(aad));
+	LogDebug("ctrLenOrTagSizeBits: " << std::to_string(ctrLenOrTagSizeBits));
+	LogDebug("wrappingKeyId: " << rawToHexString(wrappingKeyId));
+	LogDebug("wrappingKeyPwd: " << rawToHexString(wrappingKeyPwd.getPassword()));
+	LogDebug("keyToWrapId: " << rawToHexString(keyToWrapId));
+	LogDebug("keyToWrapPwd: " << rawToHexString(keyToWrapPwd.getPassword()));
+	LogDebug("keyToWrapType: " << std::to_string(static_cast<int>(keyToWrapType)));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr out;
 	int error = hal_security_keys_export_wrapped_key(ctx,
@@ -595,6 +711,16 @@ RawBuffer wrapConcatenatedData(const RawBuffer &wrappingKeyId,
 	HashAlgorithm hash = HashAlgorithm::SHA1;
 	alg.getParam(ParamName::ED_OAEP_HASH, hash);
 
+	LogDebug("hal_security_keys_wrap_concatenated_data() input:");
+
+	LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+	LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+	LogDebug("wrappingKeyId: " << rawToHexString(wrappingKeyId));
+	LogDebug("wrappingKeyPwd: " << rawToHexString(wrappingKeyPwd.getPassword()));
+	LogDebug("keyToWrapId: " << rawToHexString(keyToWrapId));
+	LogDebug("keyToWrapPwd: " << rawToHexString(keyToWrapPwd.getPassword()));
+	LogDebug("userData: " << rawToHexString(userData));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr out;
 	int error = hal_security_keys_wrap_concatenated_data(ctx,
@@ -623,6 +749,18 @@ RawBuffer unwrapConcatenatedData(const RawBuffer &wrappingKeyId,
 	HashAlgorithm hash = HashAlgorithm::SHA1;
 	alg.getParam(ParamName::ED_OAEP_HASH, hash);
 
+	LogDebug("hal_security_keys_unwrap_concatenated_data() input:");
+
+	LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+	LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+	LogDebug("wrappingKeyId: " << rawToHexString(wrappingKeyId));
+	LogDebug("wrappingKeyPwd: " << rawToHexString(wrappingKeyPwd.getPassword()));
+	LogDebug("encryptedKey.data: " << rawToHexString(encryptedKey.data));
+	LogDebug("encryptedKeyId: " << rawToHexString(encryptedKeyId));
+	LogDebug("encryptedKeyPwdBuf: " << rawToHexString(encryptedKeyPwdBuf));
+	LogDebug("encryptedKey.type: " << std::to_string(static_cast<int>(encryptedKey.type)));
+	LogDebug("keySize: " << std::to_string(static_cast<int>(keySize)));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr tag;
 	security_keys_data_ptr out;
@@ -650,6 +788,14 @@ RawBuffer encapsulateKey(const RawBuffer &publicKeyId,
 	CKM::KemType kt = unpack<CKM::KemType>(params, ParamName::GEN_KEM_TYPE);
 	RawBuffer sharedSecretPwdBuf(sharedSecretPwd.begin(), sharedSecretPwd.end());
 
+	LogDebug("hal_security_keys_encapsulate_key() input:");
+
+	LogDebug("kt: " << std::to_string(static_cast<int>(kt)));
+	LogDebug("publicKeyId: " << rawToHexString(publicKeyId));
+	LogDebug("publicKeyPwd: " << rawToHexString(publicKeyPwd.getPassword()));
+	LogDebug("sharedSecretId: " << rawToHexString(sharedSecretId));
+	LogDebug("sharedSecretPwdBuf: " << rawToHexString(sharedSecretPwdBuf));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr tag;
 	security_keys_data_ptr out;
@@ -675,6 +821,15 @@ void decapsulateKey(const RawBuffer &privateKeyId,
 	CKM::KemType kt = unpack<CKM::KemType>(params, ParamName::GEN_KEM_TYPE);
 	RawBuffer sharedSecretPwdBuf(sharedSecretPwd.begin(), sharedSecretPwd.end());
 
+	LogDebug("hal_security_keys_decapsulate_key() input:");
+
+	LogDebug("kt: " << std::to_string(static_cast<int>(kt)));
+	LogDebug("privateKeyId: " << rawToHexString(privateKeyId));
+	LogDebug("privateKeyPwd: " << rawToHexString(privateKeyPwd.getPassword()));
+	LogDebug("sharedSecretId: " << rawToHexString(sharedSecretId));
+	LogDebug("sharedSecretPwdBuf: " << rawToHexString(sharedSecretPwdBuf));
+	LogDebug("ciphertext: " << rawToHexString(ciphertext));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr tag;
 	int error = hal_security_keys_decapsulate_key(ctx, convertToHalKemType(kt),
@@ -690,6 +845,13 @@ RawBuffer getData(const RawBuffer &dataId,
 				  const Pwd &pwd,
 				  const DataType &type)
 {
+
+	LogDebug("hal_security_keys_export_data() input:");
+
+	LogDebug("dataId: " << rawToHexString(dataId));
+	LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+	LogDebug("type: " << std::to_string(static_cast<int>(type)));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr out;
 	int error = hal_security_keys_export_data(ctx,
@@ -716,6 +878,15 @@ BufferPair encryptDataAesGcm(const RawBuffer &keyId,
 {
 	auto ctx = HalContext::Instance().GetHalContext();
 
+	LogDebug("hal_security_keys_encrypt_data_auth() input:");
+
+	LogDebug("keyId: " << rawToHexString(keyId));
+	LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+	LogDebug("data: " << rawToHexString(data));
+	LogDebug("iv: " << rawToHexString(iv));
+	LogDebug("aad: " << rawToHexString(aad));
+	LogDebug("type: " << std::to_string(tagSize));
+
 	security_keys_data_ptr out;
 	security_keys_data_ptr halTag;
 	int error = hal_security_keys_encrypt_data_auth(ctx,
@@ -753,6 +924,16 @@ RawBuffer decryptDataAesGcm(const RawBuffer &keyId,
 {
 	auto ctx = HalContext::Instance().GetHalContext();
 
+	LogDebug("hal_security_keys_decrypt_data_auth() input:");
+
+	LogDebug("keyId: " << rawToHexString(keyId));
+	LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+	LogDebug("data: " << rawToHexString(data));
+	LogDebug("iv: " << rawToHexString(iv));
+	LogDebug("aad: " << rawToHexString(aad));
+	LogDebug("tagSizeBits: " << std::to_string(tagSizeBits));
+	LogDebug("aad: " << rawToHexString(tag));
+
 	security_keys_data_ptr out;
 	int error = hal_security_keys_decrypt_data_auth(ctx,
 		convertToHalData(keyId), convertToHalPwdIvTag(pwd),
@@ -809,6 +990,17 @@ RawBuffer symmetricEncrypt(const RawBuffer &keyId,
 		}
 		case AlgoType::AES_CBC:
 		case AlgoType::AES_CFB: {
+
+			LogDebug("hal_security_keys_encrypt_data() input:");
+
+			LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+			LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+			LogDebug("padding: " << std::to_string(static_cast<int>(padding)));
+			LogDebug("data: " << rawToHexString(keyId));
+			LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+			LogDebug("data: " << rawToHexString(data));
+			LogDebug("iv: " << rawToHexString(iv));
+
 			auto ctx = HalContext::Instance().GetHalContext();
 			security_keys_data_ptr out;
 			int error = hal_security_keys_encrypt_data(ctx,
@@ -865,6 +1057,17 @@ RawBuffer symmetricDecrypt(const RawBuffer &keyId,
 		}
 		case AlgoType::AES_CBC:
 		case AlgoType::AES_CFB: {
+
+			LogDebug("hal_security_keys_decrypt_data() input:");
+
+			LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+			LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+			LogDebug("padding: " << std::to_string(static_cast<int>(padding)));
+			LogDebug("data: " << rawToHexString(keyId));
+			LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+			LogDebug("data: " << rawToHexString(data));
+			LogDebug("iv: " << rawToHexString(iv));
+
 			auto ctx = HalContext::Instance().GetHalContext();
 			security_keys_data_ptr out;
 			int error = hal_security_keys_decrypt_data(ctx,
@@ -913,6 +1116,15 @@ RawBuffer asymmetricEncrypt(const RawBuffer &keyId,
 		case AlgoType::RSA_OAEP: {
 			auto ctx = HalContext::Instance().GetHalContext();
 
+			LogDebug("hal_security_keys_encrypt_data() input:");
+
+			LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+			LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+			LogDebug("padding: " << std::to_string(static_cast<int>(padding)));
+			LogDebug("data: " << rawToHexString(keyId));
+			LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+			LogDebug("data: " << rawToHexString(data));
+
 			security_keys_data_ptr out;
 			RawBuffer ivEmpty;
 			int error = hal_security_keys_encrypt_data(ctx,
@@ -949,6 +1161,16 @@ RawBuffer asymmetricDecrypt(const RawBuffer &keyId,
 
 			security_keys_data_ptr out;
 			RawBuffer ivEmpty;
+
+			LogDebug("hal_security_keys_decrypt_data() input:");
+
+			LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+			LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+			LogDebug("padding: " << std::to_string(static_cast<int>(padding)));
+			LogDebug("data: " << rawToHexString(keyId));
+			LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+			LogDebug("data: " << rawToHexString(cipher));
+
 			int error = hal_security_keys_decrypt_data(ctx,
 				convertToHalAlgoType(algo), convertToHalHashType(hash),
 				padding, convertToHalData(keyId),
@@ -982,6 +1204,15 @@ uint32_t initCipher(const RawBuffer &keyId,
 			RawBuffer iv = unpack<RawBuffer>(alg, ParamName::ED_IV);
 			hal_security_keys_cipher_context_t cipherCtx;
 
+			LogDebug("hal_security_keys_cipher_initialize() input:");
+
+			LogDebug("encrypt: " << std::to_string(encrypt));
+			LogDebug("keyId: " << rawToHexString(keyId));
+			LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+			LogDebug("iv: " << rawToHexString(iv));
+			LogDebug("aad: " << rawToHexString(aad));
+			LogDebug("tagSizeBits: " << std::to_string(tagSizeBits));
+
 			auto ctx = HalContext::Instance().GetHalContext();
 			int error = hal_security_keys_cipher_initialize(ctx, encrypt,
 				convertToHalData(keyId), convertToHalPwdIvTag(pwd),
@@ -1005,6 +1236,11 @@ uint32_t initCipher(const RawBuffer &keyId,
 
 void addAAD(uint32_t opId, const RawBuffer &aad)
 {
+	LogDebug("hal_security_keys_cipher_add_aad() input:");
+
+	LogDebug("opId: " << std::to_string(static_cast<int>(opId)));
+	LogDebug("aad: " << rawToHexString(aad));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	int error = hal_security_keys_cipher_add_aad(ctx,
 		static_cast<unsigned int>(opId), convertToHalData(aad));
@@ -1014,6 +1250,11 @@ void addAAD(uint32_t opId, const RawBuffer &aad)
 
 RawBuffer updateCipher(uint32_t opId, const RawBuffer &data)
 {
+	LogDebug("hal_security_keys_cipher_update() input:");
+
+	LogDebug("opId: " << std::to_string(static_cast<int>(opId)));
+	LogDebug("data: " << rawToHexString(data));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr out;
 	int error = hal_security_keys_cipher_update(ctx,
@@ -1025,6 +1266,11 @@ RawBuffer updateCipher(uint32_t opId, const RawBuffer &data)
 
 RawBuffer finalizeCipher(uint32_t opId, const RawBuffer &data)
 {
+	LogDebug("hal_security_keys_cipher_finalize() input:");
+
+	LogDebug("opId: " << std::to_string(static_cast<int>(opId)));
+	LogDebug("data: " << rawToHexString(data));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr out;
 	int error = hal_security_keys_cipher_finalize(ctx,
@@ -1036,6 +1282,10 @@ RawBuffer finalizeCipher(uint32_t opId, const RawBuffer &data)
 
 void cleanupCipher(uint32_t opId)
 {
+	LogDebug("hal_security_keys_cipher_free() input:");
+
+	LogDebug("opId: " << std::to_string(static_cast<int>(opId)));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	int error = hal_security_keys_cipher_free(ctx, static_cast<hal_security_keys_cipher_context_t>(opId));
 	ThrowWhenHalError(error, "Failed cipher cleanup");
@@ -1058,6 +1308,14 @@ RawBuffer sign(const RawBuffer &pkeyId,
 	if (algo == AlgoType::RSA_SV && padding != RSAPaddingAlgorithm::PKCS1)
 		ThrowErr(Exc::Crypto::InputParam, "Only PKCS1 padding is supported");
 
+	LogDebug("hal_security_keys_create_signature() input:");
+
+	LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+	LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+	LogDebug("pkeyId: " << rawToHexString(pkeyId));
+	LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+	LogDebug("message: " << rawToHexString(message));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	security_keys_data_ptr sign;
 	int error = hal_security_keys_create_signature(ctx,
@@ -1087,6 +1345,15 @@ int verify(const RawBuffer &pkeyId,
 	if (algo == AlgoType::RSA_SV && padding != RSAPaddingAlgorithm::PKCS1)
 		ThrowErr(Exc::Crypto::InputParam, "Only PKCS1 padding is supported");
 
+	LogDebug("hal_security_keys_verify_signature() input:");
+
+	LogDebug("algo: " << std::to_string(static_cast<int>(algo)));
+	LogDebug("hash: " << std::to_string(static_cast<int>(hash)));
+	LogDebug("pkeyId: " << rawToHexString(pkeyId));
+	LogDebug("pwd: " << rawToHexString(pwd.getPassword()));
+	LogDebug("message: " << rawToHexString(message));
+	LogDebug("message: " << rawToHexString(signature));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	int error = hal_security_keys_verify_signature(ctx, convertToHalAlgoType(algo),
 		convertToHalHashType(hash), convertToHalData(pkeyId), convertToHalPwdIvTag(pwd),
@@ -1153,6 +1420,16 @@ void deriveECDH(const RawBuffer &prvKeyId,
 			ThrowErr(Exc::Crypto::InputParam, "Unsupported public key EC");
 	}
 
+	LogDebug("hal_security_keys_verify_signature() input:");
+
+	LogDebug("ec: " << std::to_string(static_cast<int>(ec)));
+	LogDebug("xBuf: " << rawToHexString(xBuf));
+	LogDebug("yBuf: " << rawToHexString(yBuf));
+	LogDebug("prvKeyId: " << rawToHexString(prvKeyId));
+	LogDebug("prvKeyPwd: " << rawToHexString(prvKeyPwd.getPassword()));
+	LogDebug("secretHash: " << rawToHexString(secretHash));
+	LogDebug("secretPwdBuf: " << rawToHexString(secretPwdBuf));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 
 	security_keys_data_ptr tag;
@@ -1198,6 +1475,23 @@ void deriveKBKDF(const RawBuffer &secretId,
 
 	RawBuffer keyPwdBuf(keyPwd.begin(), keyPwd.end());
 
+	LogDebug("hal_security_keys_derive_kbkdf() input:");
+
+	LogDebug("prf: " << std::to_string(static_cast<int>(prf)));
+	LogDebug("length: " << std::to_string(static_cast<int>(length)));
+	LogDebug("mode: " << std::to_string(static_cast<int>(mode)));
+	LogDebug("label: " << rawToHexString(label));
+	LogDebug("fixed: " << rawToHexString(fixed));
+	LogDebug("counterLocation: " << std::to_string(static_cast<int>(counterLocation)));
+	LogDebug("rlenBits: " << std::to_string(static_cast<int>(rlenBits)));
+	LogDebug("llenBits: " << std::to_string(static_cast<int>(llenBits)));
+	LogDebug("noSeparator: " << std::to_string(static_cast<int>(noSeparator)));
+
+	LogDebug("secretId: " << rawToHexString(secretId));
+	LogDebug("secretPwd: " << rawToHexString(secretPwd.getPassword()));
+	LogDebug("keyHash: " << rawToHexString(keyHash));
+	LogDebug("keyPwdBuf: " << rawToHexString(keyPwdBuf));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	auto params = convertToHalParams(prf, length, mode, label, context, fixed,
 		counterLocation, rlenBits, llenBits, noSeparator);
@@ -1246,6 +1540,25 @@ void deriveHybridKBKDF(const RawBuffer &firstSecretId,
 
 	RawBuffer keyPwdBuf(keyPwd.begin(), keyPwd.end());
 
+	LogDebug("hal_security_keys_derive_hybrid_kbkdf() input:");
+
+	LogDebug("prf: " << std::to_string(static_cast<int>(prf)));
+	LogDebug("length: " << std::to_string(static_cast<int>(length)));
+	LogDebug("mode: " << std::to_string(static_cast<int>(mode)));
+	LogDebug("label: " << rawToHexString(label));
+	LogDebug("fixed: " << rawToHexString(fixed));
+	LogDebug("counterLocation: " << std::to_string(static_cast<int>(counterLocation)));
+	LogDebug("rlenBits: " << std::to_string(static_cast<int>(rlenBits)));
+	LogDebug("llenBits: " << std::to_string(static_cast<int>(llenBits)));
+	LogDebug("noSeparator: " << std::to_string(static_cast<int>(noSeparator)));
+
+	LogDebug("firstSecretId: " << rawToHexString(firstSecretId));
+	LogDebug("firstSecretPwd: " << rawToHexString(firstSecretPwd.getPassword()));
+	LogDebug("secondSecretId: " << rawToHexString(secondSecretId));
+	LogDebug("secondSecretPwd: " << rawToHexString(secondSecretPwd.getPassword()));
+	LogDebug("keyHash: " << rawToHexString(keyHash));
+	LogDebug("keyPwdBuf: " << rawToHexString(keyPwdBuf));
+
 	auto ctx = HalContext::Instance().GetHalContext();
 	auto params = convertToHalParams(prf, length, mode, label, context, fixed,
 		counterLocation, rlenBits, llenBits, noSeparator);
@@ -1266,6 +1579,9 @@ size_t maxChunkSize()
 	auto ctx = HalContext::Instance().GetHalContext();
 
 	size_t size;
+
+	LogDebug("hal_security_keys_get_max_chunk_size()");
+
 	int error = hal_security_keys_get_max_chunk_size(ctx, &size);
 	ThrowWhenHalError(error, "Failed getting max chunk size");
 

commit b5233ac3695ba19c1832832c55f80d56256dbd9e
Author:     Jan Wojtkowski <j.wojtkowski@samsung.com>
AuthorDate: Tue May 20 13:51:55 2025 +0200
Commit:     Jan Wojtkowski <j.wojtkowski@samsung.com>
CommitDate: Tue May 20 13:52:18 2025 +0200

    Change aes padding naming style
    
    Change-Id: Ifd399a5b66475d78f4ba9ebf725c69003764e3f5

diff --git a/src/include/ckmc/ckmc-type.h b/src/include/ckmc/ckmc-type.h
index b1b66ba..d50c2bd 100644
--- a/src/include/ckmc/ckmc-type.h
+++ b/src/include/ckmc/ckmc-type.h
@@ -185,9 +185,9 @@ typedef enum __ckmc_rsa_padding_algo {
  * @since_tizen 10.0
  */
 typedef enum __ckmc_aes_padding_algo {
-    CKMC_AES_NONE_PADDING = 0, /**< No Padding */
-    CKMC_AES_PKCS7_PADDING, /**< PKCS#7 Padding (default for openssl) */
-    CKMC_AES_ISO9797_M2_PADDING /**< ISO9797 method 2 Padding */
+    CKMC_AES_PADDING_NONE = 0, /**< No Padding */
+    CKMC_AES_PADDING_PKCS7, /**< PKCS#7 Padding (default for openssl) */
+    CKMC_AES_PADDING_ISO9797_M2 /**< ISO9797 method 2 Padding */
 } ckmc_aes_padding_algo_e;
 
 
